{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimTitle","trim","addItem","userMessage","style","color","className","value","onChange","e","currentTarget","onKeyDown","key","onClick","EditableSpan","EditMode","SetEditMode","SetTitle","changeTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksItems","task","length","map","item","id","isDone","type","changeStatus","todoListID","checked","changeTaskTitle","removeTask","changeTaskHandler","changeTask","newTitle","changeTodoListTitle","deleteTodoList","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","tasks","setTasks","todolistID","console","log","todoListId","taskId","buttonName","todoList","find","newTask","todolistsID","todoListsID","newTodoListId","taskForFilter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d09ea7e2.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormType) => {\r\n  const [title, setTitle] = useState<string>(' ')\r\n  const [error, setError] = useState<boolean>(false)\r\n\r\n  const addTask = () => {\r\n    const trimTitle = title.trim()\r\n    if (trimTitle) {\r\n      props.addItem(trimTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle(' ')\r\n  }\r\n\r\n  const userMessage = error\r\n    ? <div style={{ color: \"red\" }}>Title is requared! </div>\r\n    : <div> Please, create this</div>\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (error) {\r\n      setError(!error)\r\n    }\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  const onKeDownHandler = (e: any) => {\r\n    if (e.key === \"Enter\") {\r\n      addTask()\r\n    }\r\n  }\r\n\r\n  return (<>\r\n    <input\r\n      className={error ? \"error\" : \"\"}\r\n      value={title}\r\n      onChange={onChangeHandler}\r\n      onKeyDown={onKeDownHandler}\r\n    />\r\n    <button onClick={addTask}>+</button>\r\n    {userMessage}\r\n  </>)\r\n}\r\nexport default AddItemForm","import React, { ChangeEvent, useState } from \"react\";\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeTitle: (newTitle: string) => void\r\n}\r\nconst EditableSpan = (props: EditableSpanType) => {\r\n  const [EditMode, SetEditMode] = useState<boolean>(false)\r\n\r\n  const [title, SetTitle] = useState(props.title)\r\n\r\n  const onDoubleClickHandler = () => {\r\n    SetEditMode(!EditMode)\r\n    SetTitle(props.title)\r\n  }\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    SetTitle(e.currentTarget.value)\r\n    props.changeTitle(title)\r\n  }\r\n\r\n  return (<>\r\n    {EditMode ?\r\n      <input value={title} onChange={onChangeHandler} onBlur={() => SetEditMode(!EditMode)} autoFocus />\r\n      : <span onDoubleClick={onDoubleClickHandler}>{title}</span>}\r\n\r\n\r\n  </>)\r\n}\r\nexport default EditableSpan","import React from \"react\";\nimport { taskFilterType } from \"./App\";\nimport AddItemForm from \"./Components/AddItemForm\";\nimport EditableSpan from \"./Components/EditableSpan\";\n\ntype TodoListPropsType = {\n  title: string;\n  task: Array<TaskType>;\n  removeTask: (todoListId: string, taskId: string) => void;\n  changeTask: (todoListID: string, buttonName: taskFilterType) => void;\n  addTask: (todoListID: string, title: string) => void;\n  changeStatus: (todolistID: string, taskId: string, isDone: boolean) => void\n  filter: taskFilterType\n  todoListID: string\n  deleteTodoList: (todoListID: string) => void\n  changeTaskTitle: (todoListsID: string, taskId: string, title: string) => void\n  changeTodoListTitle: (todoListsID: string, title: string) => void\n}\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n}\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: taskFilterType;\n}\nconst TodoList = (props: TodoListPropsType) => {\n  const tasksItems = props.task.length ?\n    props.task.map(item => {\n\n      const changeTaskTitle = (title: string) => {\n        props.changeTaskTitle(props.todoListID, item.id, title)\n      }\n\n      return (\n        <li key={item.id} className={item.isDone ? 'isDone' : \"\"}>\n          <input  type=\"checkbox\" onChange={\n              e => props.changeStatus(props.todoListID, item.id, e.currentTarget.checked)\n            } checked={item.isDone} />\n\n          {/* <span>{item.title}</span> */}\n          <EditableSpan title={item.title} changeTitle={changeTaskTitle} />\n          <button onClick={() => { props.removeTask(props.todoListID, item.id) }}>x</button>\n        </li>\n      )\n    })\n    : <div>\"No task there\"</div>\n\n  const addTask = (title: string) => {\n    props.addTask(props.todoListID, title)\n  }\n\n  const changeTaskHandler = (title: taskFilterType) => {\n    return () => { props.changeTask(props.todoListID, title) }\n  }\n\n  const onClickHandlerForTodoList = () => {\n    props.deleteTodoList(props.todoListID)\n  }\n  const changeTitleCallback =(newTitle:string)=>{\n    props.changeTodoListTitle( props.todoListID, newTitle)\n  }\n\n  return (\n    <div>\n      <h3>\n        {/* {props.title} */}\n        <EditableSpan title={props.title} changeTitle={changeTitleCallback} />\n        <button onClick={onClickHandlerForTodoList}>Del</button>\n      </h3>\n      <div>\n        <AddItemForm addItem={addTask} />\n      </div>\n      <ul>\n        {tasksItems}\n      </ul>\n      <div>\n        <button className={props.filter === \"all\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('all')}>All</button>\n        <button className={props.filter === \"active\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('active')}>Active</button>\n        <button className={props.filter === \"completed\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('completed')}>Completed</button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default TodoList;\n\n","import React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport AddItemForm from './Components/AddItemForm';\nimport TodoList, { TodoListType } from './TodoList';\n\nexport type taskFilterType = \"all\" | \"active\" | \"completed\";\n\n\n// class components\nfunction App() {\n\n    // BusnessLogic\n    // бывает еще интерфейс -терминал \n    // Графический интерфейс у нас в проекте (GUI)\n    // GUI-> CRUD(Create, Read, Update, Delete)\n    // С + -одна функция\n    // r +++\n    // U ++!-пропорционально сложности обьекта (сколько свойств столько и функций внесения изменений)\n    // D +\n\n    let todolistID1 = v1();\n    let todolistID2 = v1();\n\n    let [todolists, setTodolists] = useState<Array<TodoListType>>([\n        { id: todolistID1, title: 'What to learn', filter: 'all' },\n        { id: todolistID2, title: 'What to buy', filter: 'completed' },\n    ])\n    let [tasks, setTasks] = useState({\n        [todolistID1]: [\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\n            { id: v1(), title: \"JS\", isDone: true },\n            { id: v1(), title: \"ReactJS\", isDone: false },\n            { id: v1(), title: \"Rest API\", isDone: false },\n            { id: v1(), title: \"GraphQL\", isDone: false },\n        ],\n        [todolistID2]: [\n            { id: v1(), title: \"HTML&CSS2\", isDone: true },\n            { id: v1(), title: \"JS2\", isDone: true },\n            { id: v1(), title: \"ReactJS2\", isDone: false },\n            { id: v1(), title: \"Rest API2\", isDone: false },\n            { id: v1(), title: \"GraphQL2\", isDone: false },\n        ]\n    });\n    const deleteTodoList = (todolistID: string) => {\n        setTodolists(todolists.filter(item => item.id !== todolistID))\n        console.log(\"before t\", tasks)\n\n        delete tasks[todolistID]\n        console.log(\"after t\", tasks)\n\n    }\n\n    const removeTask = (todoListId: string, taskId: string) => {\n        // task = task.filter(item => item.id !== taskId)\n        // setTask(task)\n        //  setTask работает асинхронно\n        setTasks({ ...tasks, [todoListId]: tasks[todoListId].filter(item => item.id !== taskId) })\n\n    }\n    // ///////////////////////////////////\n    const changeTask = (todoListID: string, buttonName: taskFilterType) => {\n        // filterTask(buttonName)\n        let todoList = todolists.find(item => item.id === todoListID)\n        if (todoList) {\n            todoList.filter = buttonName\n            setTodolists([...todolists])\n        }\n    }\n    // UseState работает асинхронно\n    //\n    const addTask = (todoListID: string, title: string) => {\n\n        const newTask = {\n            id: v1(), title, isDone: false\n        }\n        // let newTaskArray = [newTask, ...task]\n        // setTask(newTaskArray)\n        setTasks({ ...tasks, [todoListID]: [newTask, ...tasks[todoListID]] })\n\n    }\n\n    const addTodoList = (title: string) => {\n        const newTodoListId: string = v1()\n        setTodolists([...todolists, { id: newTodoListId, title, filter: \"all\" }])\n        setTasks({\n            ...tasks, [newTodoListId]: [{ id: v1(), title: \"ReactJS2\", isDone: false },\n            { id: v1(), title: \"Rest API2\", isDone: false },\n            { id: v1(), title: \"GraphQL2\", isDone: false },]\n        })\n    }\n\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\n        // setTask(task.map(item=>item.id !== taskId ? item : {...item, isDone}))\n        setTasks({\n            ...tasks, [todolistID]: tasks[todolistID].map(item => item.id === taskId ?\n                { ...item, isDone } : item)\n        })\n\n    }\n\n    const changeTaskTitle = (todolistsID: string, taskId: string, title: string) => {\n        setTasks({\n            ...tasks, [todolistsID]: tasks[todolistsID].map(item => item.id === taskId ?\n                { ...item, title } : item)\n        })\n    }\n    const changeTodoListTitle = (todoListsID: string, title: string) => {\n        setTodolists(todolists.map(item => item.id === todoListsID ? { ...item, title } : item))\n    }\n\n\n    return (<>\n        <AddItemForm addItem={addTodoList} />\n        <div className=\"App\">\n\n            {todolists.map(item => {\n                let taskForFilter = tasks[item.id];\n                if (item.filter === \"active\") {\n                    taskForFilter = taskForFilter.filter(item => item.isDone === false)\n                }\n                if (item.filter === \"completed\") {\n                    taskForFilter = taskForFilter.filter(item => item.isDone === true)\n                }\n\n                return <TodoList title={item.title}\n                    key={item.id}\n                    task={taskForFilter}\n                    removeTask={removeTask}\n                    changeTask={changeTask}\n                    addTask={addTask}\n                    changeStatus={changeStatus}\n                    filter={item.filter}\n                    todoListID={item.id}\n                    deleteTodoList={deleteTodoList}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                />\n            })}\n\n        </div> </>\n    );\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}