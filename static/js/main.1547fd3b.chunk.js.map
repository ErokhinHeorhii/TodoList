{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","tasksItems","task","length","map","item","key","id","className","isDone","type","onChange","e","changeStatus","todoListID","currentTarget","checked","title","onClick","removeTask","useState","setTitle","error","setError","addTask","trimTitle","trim","changeTaskHandler","changeTask","userMessage","style","color","deleteTodoList","value","onKeyDown","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","tasks","setTasks","todolistID","console","log","todoListId","taskId","buttonName","todoList","find","newTask","taskForFilter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1547fd3b.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { taskFilterType } from \"./App\";\n\ntype TodoListPropsType = {\n  title: string;\n  task: Array<TaskType>;\n  removeTask: (todoListId: string, taskId: string) => void;\n  changeTask: (todoListID: string, buttonName: taskFilterType) => void;\n  addTask: (todoListID: string, title: string) => void;\n  changeStatus: (todolistID: string, taskId: string, isDone: boolean) => void\n  filter: taskFilterType\n  todoListID: string\n  deleteTodoList: (todoListID: string) => void\n}\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n}\n\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: taskFilterType;\n}\nconst TodoList = (props: TodoListPropsType) => {\n  const tasksItems = props.task.length ?\n    props.task.map(item => {\n      return (\n        <li key={item.id} className={item.isDone ? 'isDone' : \"\"}>\n          <input\n            type=\"checkbox\" onChange={\n              e => props.changeStatus(props.todoListID, item.id, e.currentTarget.checked)\n            } checked={item.isDone} />\n\n          <span>{item.title}</span>\n          <button onClick={() => { props.removeTask(props.todoListID, item.id) }}>x</button>\n        </li>\n      )\n    }) :\n    <div>\"No task there\"</div>\n\n\n  const [title, setTitle] = useState<string>(' ')\n  const [error, setError] = useState<boolean>(false)\n\n  const addTask = () => {\n    const trimTitle = title.trim()\n    if (trimTitle) {\n      props.addTask(props.todoListID, trimTitle)\n    } else {\n      setError(true)\n    }\n    setTitle(' ')\n  }\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (error) {\n      setError(!error)\n    }\n    setTitle(e.currentTarget.value)\n  }\n\n  const onKeDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      addTask()\n    }\n  }\n\n  const changeTaskHandler = (title: taskFilterType) => {\n    return () => { props.changeTask(props.todoListID, title) }\n  }\n\n  const userMessage = error\n    ? <div style={{ color: \"red\" }}>Title is requared! </div>\n    : <div> Please, create this</div>\n\n  const onClickHandlerForTodoList = () => {\n    props.deleteTodoList(props.todoListID)\n  }\n\n  return (\n    <div>\n      <h3>{props.title}\n        <button onClick={onClickHandlerForTodoList}>Del</button>\n      </h3>\n      <div>\n        <input\n          className={error ? \"error\" : \"\"}\n          value={title}\n          onChange={onChangeHandler}\n          onKeyDown={onKeDownHandler}\n        />\n        <button onClick={addTask}>+</button>\n        {userMessage}\n      </div>\n      <ul>\n        {tasksItems}\n      </ul>\n      <div>\n        <button className={props.filter === \"all\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('all')}>All</button>\n        <button className={props.filter === \"active\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('active')}>Active</button>\n        <button className={props.filter === \"completed\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('completed')}>Completed</button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default TodoList;","import React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport TodoList, { TodoListType } from './TodoList';\n\nexport type taskFilterType = \"all\" | \"active\" | \"completed\";\n\n\n// class components\nfunction App() {\n\n    // BusnessLogic\n    // бывает еще интерфейс -терминал \n    // Графический интерфейс у нас в проекте (GUI)\n    // GUI-> CRUD(Create, Read, Update, Delete)\n    // С + -одна функция\n    // r +++\n    // U ++!-пропорционально сложности обьекта (сколько свойств столько и функций внесения изменений)\n    // D +\n\n    let todolistID1 = v1();\n    let todolistID2 = v1();\n\n    let [todolists, setTodolists] = useState<Array<TodoListType>>([\n        { id: todolistID1, title: 'What to learn', filter: 'all' },\n        { id: todolistID2, title: 'What to buy', filter: 'completed' },\n    ])\n\n    let [tasks, setTasks] = useState({\n        [todolistID1]: [\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\n            { id: v1(), title: \"JS\", isDone: true },\n            { id: v1(), title: \"ReactJS\", isDone: false },\n            { id: v1(), title: \"Rest API\", isDone: false },\n            { id: v1(), title: \"GraphQL\", isDone: false },\n        ],\n        [todolistID2]: [\n            { id: v1(), title: \"HTML&CSS2\", isDone: true },\n            { id: v1(), title: \"JS2\", isDone: true },\n            { id: v1(), title: \"ReactJS2\", isDone: false },\n            { id: v1(), title: \"Rest API2\", isDone: false },\n            { id: v1(), title: \"GraphQL2\", isDone: false },\n        ]\n    });\n\n    const deleteTodoList = (todolistID: string) => {\n        setTodolists(todolists.filter(item => item.id !== todolistID))\n        console.log(\"before t\", tasks)\n\n        delete tasks[todolistID]\n        console.log(\"after t\", tasks)\n\n    }\n\n    const removeTask = (todoListId: string, taskId: string) => {\n        // task = task.filter(item => item.id !== taskId)\n        // setTask(task)\n        //  setTask работает асинхронно\n        setTasks({ ...tasks, [todoListId]: tasks[todoListId].filter(item => item.id !== taskId) })\n\n    }\n    // ///////////////////////////////////\n    const changeTask = (todoListID: string, buttonName: taskFilterType) => {\n        // filterTask(buttonName)\n        let todoList = todolists.find(item => item.id === todoListID)\n        if (todoList) {\n            todoList.filter = buttonName\n            setTodolists([...todolists])\n        }\n    }\n    // UseState работает асинхронно\n    //\n    const addTask = (todoListID: string, title: string) => {\n\n        const newTask = {\n            id: v1(), title, isDone: false\n        }\n        // let newTaskArray = [newTask, ...task]\n        // setTask(newTaskArray)\n        setTasks({ ...tasks, [todoListID]: [newTask, ...tasks[todoListID]] })\n    }\n\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\n        // setTask(task.map(item=>item.id !== taskId ? item : {...item, isDone}))\n        setTasks({\n            ...tasks, [todolistID]: tasks[todolistID].map(item => item.id === taskId ?\n                { ...item, isDone } : item)\n        })\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            {todolists.map(item => {\n                let taskForFilter = tasks[item.id];\n                if (item.filter === \"active\") {\n                    taskForFilter = taskForFilter.filter(item => item.isDone === false)\n                }\n                if (item.filter === \"completed\") {\n                    taskForFilter = taskForFilter.filter(item => item.isDone === true)\n                }\n\n                return <TodoList title={item.title}\n                    key={item.id}\n                    task={taskForFilter}\n                    removeTask={removeTask}\n                    changeTask={changeTask}\n                    addTask={addTask}\n                    changeStatus={changeStatus}\n                    filter={item.filter}\n                    todoListID={item.id}\n                    deleteTodoList={deleteTodoList} />\n            })}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}