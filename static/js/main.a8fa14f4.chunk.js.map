{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","tasksItems","task","length","map","item","key","id","className","isDone","type","onChange","e","changeStatus","currentTarget","checked","title","onClick","removeTask","useState","setTitle","error","setError","addTask","trimTitle","trim","changeTaskHandler","changeTask","userMessage","style","color","value","onKeyDown","filter","App","v1","setTask","filterTask","taskForFilter","setFiltertask","taskId","buttonName","newTaskArray","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a8fa14f4.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { taskFilterType } from \"./App\";\n\ntype TodoListPropsType = {\n  title: string;\n  task: Array<TaskType>;\n  removeTask: (taskId: string) => void;\n  changeTask: (buttonName: taskFilterType) => void;\n  addTask: (title: string) => void;\n  changeStatus: (taskId: string, isDone: boolean) => void\n  filter: taskFilterType\n}\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n}\n\nconst TodoList = (props: TodoListPropsType) => {\n  const tasksItems = props.task.length ?\n    props.task.map(item => {\n      return (\n        <li key={item.id} className={item.isDone ? 'isDone' : \"\"}>\n          <input\n            type=\"checkbox\" onChange={\n              e => props.changeStatus(item.id, e.currentTarget.checked)\n            } checked={item.isDone} />\n\n          <span>{item.title}</span>\n          <button onClick={() => { props.removeTask(item.id) }}>x</button>\n        </li>\n      )\n    }) :\n    <div>\"No task there\"</div>\n\n\n  const [title, setTitle] = useState<string>(' ')\n  const [error, setError] = useState<boolean>(false)\n\n  const addTask = () => {\n    const trimTitle = title.trim()\n    if (trimTitle) {\n      props.addTask(trimTitle)\n    } else {\n      setError(true)\n    }\n\n    setTitle(' ')\n  }\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    if (error) {\n      setError(false)\n    }\n    setTitle(e.currentTarget.value)\n  }\n\n  const onKeDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      addTask()\n    }\n  }\n\n  const changeTaskHandler = (title: taskFilterType) => {\n    return () => { props.changeTask(title) }\n  }\n\n  const userMessage = error \n  ?  <div style ={{color:\"red\"}}>Title is requared! </div>\n  : <div> Please, create this</div>\n\n  return (\n    <div>\n      <h3>{props.title}</h3>\n      <div>\n        <input \n          className={error ? \"error\" : \"\"}\n          value={title}\n          onChange={onChangeHandler}\n          onKeyDown={onKeDownHandler}\n        />\n        <button onClick={addTask}>+</button>\n        {userMessage}\n      </div>\n      <ul>\n        {tasksItems}\n      </ul>\n      <div>\n        <button className={props.filter === \"all\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('all')}>All</button>\n        <button className={props.filter === \"active\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('active')}>Active</button>\n        <button className={props.filter === \"completed\" ? \"btn-active\" : \"\"} onClick={changeTaskHandler('completed')}>Completed</button>\n      </div>\n    </div>\n\n  );\n}\n\nexport default TodoList;","import React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport TodoList, { TaskType } from './TodoList';\n\nexport type taskFilterType = \"all\" | \"active\" | \"completed\";\n\n\n// class components\nfunction App() {\n\n    // BusnessLogic\n    // бывает еще интерфейс -терминал \n    // Графический интерфейс у нас в проекте (GUI)\n    // GUI-> CRUD(Create, Read, Update, Delete)\n    // С + -одна функция\n    // r +++\n    // U ++!-пропорционально сложности обьекта (сколько свойств столько и функций внесения изменений)\n    // D +\n\n    const TodoListTitle = \"What to learn now? \"\n\n    let [task, setTask] = useState<Array<TaskType>>(\n        [\n            { id: v1(), title: \"HTML&CSS\", isDone: false },\n            { id: v1(), title: \"React\", isDone: true },\n            { id: v1(), title: \"JS&TS\", isDone: false },\n            { id: v1(), title: \"Git\", isDone: true },\n        ]\n    )\n\n    const removeTask = (taskId: string) => {\n        task = task.filter(item => item.id !== taskId)\n        setTask(task)\n        //  setTask работает асинхронно\n    }\n    // ///////////////////////////////////\n    const [filter, filterTask] = useState<taskFilterType>(\"all\")\n\n    function setFiltertask() {\n        let taskForFilter = task;\n        if (filter === \"active\") {\n            return taskForFilter = task.filter(item => item.isDone === false)\n        }\n        if (filter === \"completed\") {\n            return taskForFilter = task.filter(item => item.isDone === true)\n        }\n        return taskForFilter\n    }\n\n    const changeTask = (buttonName: taskFilterType) => {\n        filterTask(buttonName)\n    }\n    // UseState работает асинхронно\n    //\n    const addTask = (title: string) => {\n   \n        const newTask = {\n            id: v1(), title, isDone: false\n        }\n\n        let newTaskArray = [newTask, ...task]\n        setTask(newTaskArray)\n    }\n\n    const changeStatus=(taskId: string, isDone:boolean)=>{\n        setTask(task.map(item=>item.id !== taskId ? item : {...item, isDone}))\n    }\n\n    \n    return (\n        <div className=\"App\">\n            <TodoList title={TodoListTitle}\n                task={setFiltertask()}\n                removeTask={removeTask}\n                changeTask={changeTask}\n                addTask={addTask}\n                changeStatus={changeStatus} \n                filter={filter}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}