{"version":3,"sources":["serviceWorker.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","TodoList.tsx","AppWithReducer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addTask","trimTitle","trim","addItem","userMessage","style","color","TextField","label","value","onChange","e","currentTarget","onKeyDown","key","size","variant","Button","onClick","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","EditMode","SetEditMode","SetTitle","onKeyPress","charCode","changeTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksItems","task","length","map","item","id","className","isDone","Checkbox","changeStatus","todolistID","checked","changeTaskTitle","IconButton","aria-label","removeTask","Delete","fontSize","changeTaskHandler","changeTask","newTitle","changeTodolistTitle","deleteTodolist","startIcon","filter","App","todolistID1","v1","todolistID2","todolists","setTodolists","tasks","setTasks","deleteTodoList","console","log","todolistId","taskId","buttonName","todolist","find","newTask","todolistsID","changeTodoListTitle","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","padding","newTodolistId","spacing","taskForFilter","Paper","ReactDOM","render","AppWithReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.76131d7b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = (props: AddItemFormType) => {\n    const [title, setTitle] = useState<string>(' ')\n    const [error, setError] = useState<boolean>(false)\n\n    const addTask = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n        } else {\n            setError(true)\n        }\n        setTitle(' ')\n    }\n\n    const userMessage = error\n        ? <div style={{color: \"red\"}}>Title is requared! </div>\n        : <div> Please, create this</div>\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error) {\n            setError(!error)\n        }\n        setTitle(e.currentTarget.value)\n    }\n    const onKeDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addTask()\n        }\n    }\n\n    return (<>\n        {/*<input*/}\n        {/*    className={error ? \"error\" : \"\"}*/}\n        {/*    value={title}*/}\n        {/*    onChange={onChangeHandler}*/}\n        {/*    onKeyDown={onKeDownHandler}*/}\n        {/*/>*/}\n        <TextField\n            label={error ? \"error\" : \"\"}\n            value={title}\n            onChange={onChangeHandler}\n            onKeyDown={onKeDownHandler}\n            size={\"small\"}\n            variant=\"outlined\"\n            error={!!error}\n        />\n        {/*<button onClick={addTask}>+</button>*/}\n        <Button variant=\"outlined\"\n                onClick={addTask}\n                style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}>\n            +\n        </Button>\n        {userMessage}\n    </>)\n}\nexport default AddItemForm","import React, { ChangeEvent, useState } from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanType = {\n  title: string\n  changeTitle: (newTitle: string) => void\n}\nconst EditableSpan = (props: EditableSpanType) => {\n  const [EditMode, SetEditMode] = useState<boolean>(false)\n\n  const [title, SetTitle] = useState(props.title)\n\n  const onDoubleClickHandler = () => {\n    SetEditMode(!EditMode)\n    SetTitle(props.title)\n  }\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    SetTitle(e.currentTarget.value)\n    props.changeTitle(title)\n  }\n\nconst onKeyPressHandler = (e:React.KeyboardEvent<HTMLInputElement>)=>{\n  if(e.charCode === 13){\n    props.changeTitle(title)\n    SetTitle(props.title)\n    SetEditMode(!EditMode)\n  }\n}\n  return (<>\n    {EditMode ?\n        <TextField  value={title}\n                    onKeyPress={onKeyPressHandler}\n                    variant=\"outlined\"\n                    onChange={onChangeHandler}\n                    onBlur={() => SetEditMode(!EditMode)}\n                    size={\"small\"}\n                    autoFocus/>\n      : <span onDoubleClick={onDoubleClickHandler}>{title}</span>}\n\n\n  </>)\n}\nexport default EditableSpan","import React, {ChangeEvent} from \"react\";\nimport {TaskFilterType} from \"./App\";\nimport AddItemForm from \"./Components/AddItemForm\";\nimport EditableSpan from \"./Components/EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype TodolistPropsType = {\n    title: string;\n    task: Array<TaskType>;\n    removeTask: (todolistId: string, taskId: string) => void;\n    changeTask: (todolistID: string, buttonName: TaskFilterType) => void;\n    addTask: (todolistID: string, title: string) => void;\n    changeStatus: (todolistID: string, taskId: string, isDone: boolean) => void\n    filter: TaskFilterType\n    todolistID: string\n    deleteTodolist: (todolistID: string) => void\n    changeTaskTitle: (todolistID: string, taskId: string, title: string) => void\n    changeTodolistTitle: (todolistID: string, title: string) => void\n}\n\nexport type TaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type TodolistType = {\n    id: string;\n    title: string;\n    filter: TaskFilterType;\n}\nconst TodoList = (props: TodolistPropsType) => {\n\n    const tasksItems = props.task.length ?\n        props.task.map(item => {\n            const changeTaskTitle = (title: string) => {\n                props.changeTaskTitle(props.todolistID, item.id, title)\n            }\n            const changeStatusCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\n                props.changeStatus(props.todolistID, item.id, e.currentTarget.checked)\n            }\n            return (\n                <li key={item.id} className={item.isDone ? 'isDone' : \"\"}>\n                    <Checkbox color='primary' onChange={changeStatusCheckbox} checked={item.isDone}/>\n                    <EditableSpan title={item.title} changeTitle={changeTaskTitle}/>\n                    <IconButton aria-label=\"delete\" size=\"small\"\n                                onClick={() => {\n                                    props.removeTask(props.todolistID, item.id)\n                                }}\n                    >\n                        <Delete fontSize=\"small\"/>\n                    </IconButton>\n                </li>\n            )\n        })\n        : <div>\"No task there\"</div>\n\n    const addTask = (title: string) => {\n        props.addTask(props.todolistID, title)\n    }\n\n    const changeTaskHandler = (title: TaskFilterType) => {\n        return () => {\n            props.changeTask(props.todolistID, title)\n        }\n    }\n\n    const onClickHandlerForTodoList = () => {\n        props.deleteTodolist(props.todolistID)\n    }\n    const changeTodoListTitle = (newTitle: string) => {\n        props.changeTodolistTitle(props.todolistID, newTitle)\n    }\n\n    return (\n        <div>\n            <h3>\n                {/* {props.title} */}\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <Button onClick={onClickHandlerForTodoList} variant=\"outlined\" startIcon={<Delete/>}\n                        style={{maxWidth: '60px', maxHeight: '30px', minWidth: '06px', minHeight: '30px'}}>\n                    Del\n                </Button>\n                {/*<button onClick={onClickHandlerForTodoList}>Del</button>*/}\n\n            </h3>\n            <div>\n                <AddItemForm addItem={addTask}/>\n            </div>\n            <ul>\n                {tasksItems}\n            </ul>\n            <div>\n                <Button\n                    onClick={changeTaskHandler('all')}\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>All</Button>\n                <Button\n                    onClick={changeTaskHandler('active')}\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>Active</Button>\n                <Button\n                    onClick={changeTaskHandler('completed')}\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>Completed</Button>\n            </div>\n        </div>\n\n    );\n}\n\nexport default TodoList;\n\n","import React, {useState} from 'react';\nimport {v1} from 'uuid';\nimport './App.css';\nimport AddItemForm from './Components/AddItemForm';\nimport TodoList, {TaskType, TodolistType} from './TodoList';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\n\nexport type TaskFilterType = \"all\" | \"active\" | \"completed\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n// class components\nfunction App() {\n\n    // BusnessLogic\n    // бывает еще интерфейс -терминал \n    // Графический интерфейс у нас в проекте (GUI)\n    // GUI-> CRUD(Create, Read, Update, Delete)\n    // С + -одна функция\n    // r +++\n    // U ++!-пропорционально сложности обьекта (сколько свойств столько и функций внесения изменений)\n    // D +\n\n    let todolistID1 = v1();\n    let todolistID2 = v1();\n\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\n        {id: todolistID2, title: 'What to buy', filter: 'completed'},\n    ])\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todolistID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ],\n        [todolistID2]: [\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\n            {id: v1(), title: \"JS2\", isDone: true},\n            {id: v1(), title: \"ReactJS2\", isDone: false},\n            {id: v1(), title: \"Rest API2\", isDone: false},\n            {id: v1(), title: \"GraphQL2\", isDone: false},\n        ]\n    });\n    const deleteTodoList = (todolistID: string) => {\n        setTodolists(todolists.filter(item => item.id !== todolistID))\n        console.log(\"before t\", tasks)\n\n        delete tasks[todolistID]\n        console.log(\"after t\", tasks)\n\n    }\n\n    const removeTask = (todolistId: string, taskId: string) => {\n        // task = task.filter(item => item.id !== taskId)\n        // setTask(task)\n        //  setTask работает асинхронно\n        setTasks({...tasks, [todolistId]: tasks[todolistId].filter(item => item.id !== taskId)})\n\n    }\n    // ///////////////////////////////////\n    const changeTask = (todolistID: string, buttonName: TaskFilterType) => {\n        // filterTask(buttonName)\n        let todolist = todolists.find(item => item.id === todolistID)\n        if (todolist) {\n            todolist.filter = buttonName\n            setTodolists([...todolists])\n        }\n    }\n\n    // UseState работает асинхронно\n    const addTask = (todolistID: string, title: string) => {\n        const newTask = {\n            id: v1(), title, isDone: false\n        }\n        // let newTaskArray = [newTask, ...task]\n        // setTask(newTaskArray)\n        setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]})\n\n    }\n\n    const addTodoList = (title: string) => {\n        const newTodolistId: string = v1()\n        setTodolists([...todolists, {id: newTodolistId, title, filter: \"all\"}])\n        setTasks({\n            ...tasks, [newTodolistId]: [\n                {id: v1(), title: \"ReactJS2\", isDone: false},\n                {id: v1(), title: \"Rest API2\", isDone: false},\n                {id: v1(), title: \"GraphQL2\", isDone: false},]\n        })\n    }\n\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\n        // setTask(task.map(item=>item.id !== taskId ? item : {...item, isDone}))\n        setTasks({\n            ...tasks, [todolistID]: tasks[todolistID].map(item => item.id === taskId ?\n                {...item, isDone} : item)\n        })\n    }\n\n    const changeTaskTitle = (todolistsID: string, taskId: string, title: string) => {\n        setTasks({\n            ...tasks, [todolistsID]: tasks[todolistsID].map(item => item.id === taskId ?\n                {...item, title} : item)\n        })\n    }\n\n    const changeTodoListTitle = (todolistID: string, title: string) => {\n        setTodolists(todolists.map(item => item.id === todolistID ? {...item, title} : item))\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    >\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoList\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style ={{padding:\"20px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container>\n                    <Grid container spacing={3}>\n                        {todolists.map(item => {\n                            let taskForFilter = tasks[item.id];\n                            if (item.filter === \"active\") {\n                                taskForFilter = taskForFilter.filter(item => !item.isDone)\n                            }\n                            if (item.filter === \"completed\") {\n                                taskForFilter = taskForFilter.filter(item => item.isDone)\n                            }\n                            return (<Grid item>\n                                <Paper style={{padding: \"15px\"}}>\n                                    <TodoList title={item.title}\n                                              key={item.id}\n                                              task={taskForFilter}\n                                              removeTask={removeTask}\n                                              changeTask={changeTask}\n                                              addTask={addTask}\n                                              changeStatus={changeStatus}\n                                              filter={item.filter}\n                                              todolistID={item.id}\n                                              deleteTodolist={deleteTodoList}\n                                              changeTaskTitle={changeTaskTitle}\n                                              changeTodolistTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>)\n                        })}\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\n\r\nReactDOM.render(<AppWithReducer />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}