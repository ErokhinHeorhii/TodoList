{"version":3,"sources":["serviceWorker.ts","Components/AddItemForm.tsx","Components/EditableSpan.tsx","TaskComponent.tsx","TodoList.tsx","Redusers/todolists-redusers.ts","Redusers/tasks-redusers.ts","AppWithRedax.tsx","State/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addTask","trimTitle","trim","addItem","userMessage","style","color","TextField","label","value","onChange","e","currentTarget","onKeyDown","key","size","variant","Button","onClick","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","EditMode","SetEditMode","SetTitle","onKeyPress","charCode","changeTitle","onBlur","autoFocus","onDoubleClick","Task","changeTaskTitle","useCallback","todolistID","itemTask","id","className","isDone","Checkbox","changeTaskStatus","checked","IconButton","aria-label","removeTask","Delete","fontSize","TodoList","console","log","taskForFilter","task","filter","item","tasksItems","length","map","changeStatus","changeTaskHandler","changeTask","changeTodoListTitle","newTitle","changeTodolistTitle","deleteTodolist","startIcon","paddingTop","todolistId1","v1","todolistId2","initialState","App","todolists","useSelector","state","tasks","dispatch","useDispatch","deleteTodoList","type","payload","todolistId","taskId","removeTaskAC","buttonName","newFilter","changeTodolistFilterAC","addTaskAC","addTodoList","action","changeTaskStatusAC","todolistsID","changeTaskTitleAC","newTodolistTitle","changeTodolistTitleAC","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","padding","spacing","Paper","rootReducer","combineReducers","newTask","stateCopy","store","legacy_createStore","ReactDOM","render","AppWithRedax","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.07c0b92a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {Button, TextField} from \"@mui/material\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = React.memo((props: AddItemFormType) => {\n    const [title, setTitle] = useState<string>(' ')\n    const [error, setError] = useState<boolean>(false)\n\n    const addTask = () => {\n        const trimTitle = title.trim()\n        if (trimTitle) {\n            props.addItem(trimTitle)\n        } else {\n            setError(true)\n        }\n        setTitle(' ')\n    }\n\n    const userMessage = error\n        ? <div style={{color: \"red\"}}>Title is requared! </div>\n        : <div> Please, create this</div>\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error) {\n            setError(!error)\n        }\n        setTitle(e.currentTarget.value)\n    }\n    const onKeDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addTask()\n        }\n    }\n\n    return (<>\n        {/*<input*/}\n        {/*    className={error ? \"error\" : \"\"}*/}\n        {/*    value={title}*/}\n        {/*    onChange={onChangeHandler}*/}\n        {/*    onKeyDown={onKeDownHandler}*/}\n        {/*/>*/}\n        <TextField\n            label={error ? \"error\" : \"\"}\n            value={title}\n            onChange={onChangeHandler}\n            onKeyDown={onKeDownHandler}\n            size={\"small\"}\n            variant=\"outlined\"\n            error={!!error}\n        />\n        {/*<button onClick={addTask}>+</button>*/}\n        <Button variant=\"outlined\"\n                onClick={addTask}\n                style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}>\n            +\n        </Button>\n        {userMessage}\n    </>)\n})\nexport default AddItemForm","import React, { ChangeEvent, useState } from \"react\";\nimport {TextField} from \"@mui/material\";\n\ntype EditableSpanType = {\n  title: string\n  changeTitle: (newTitle: string) => void\n}\nconst EditableSpan = (props: EditableSpanType) => {\n  const [EditMode, SetEditMode] = useState<boolean>(false)\n\n  const [title, SetTitle] = useState(props.title)\n\n  const onDoubleClickHandler = () => {\n    SetEditMode(!EditMode)\n    SetTitle(props.title)\n  }\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    SetTitle(e.currentTarget.value)\n    props.changeTitle(title)\n  }\n\nconst onKeyPressHandler = (e:React.KeyboardEvent<HTMLInputElement>)=>{\n  if(e.charCode === 13){\n    props.changeTitle(title)\n    SetTitle(props.title)\n    SetEditMode(!EditMode)\n  }\n}\n  return (<>\n    {EditMode ?\n        <TextField  value={title}\n                    onKeyPress={onKeyPressHandler}\n                    variant=\"outlined\"\n                    onChange={onChangeHandler}\n                    onBlur={() => SetEditMode(!EditMode)}\n                    size={\"small\"}\n                    autoFocus/>\n      : <span onDoubleClick={onDoubleClickHandler}>{title}</span>}\n\n\n  </>)\n}\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from \"react\"\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport EditableSpan from \"./Components/EditableSpan\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TaskType} from \"./TodoList\";\r\n\r\n type TaskComponentType={\r\n    itemTask:TaskType\r\n     todolistID:string\r\n     removeTask:(taskId: string, todolistId: string) => void\r\n     changeTaskStatus: ( todolistId: string, id: string, isDone: boolean) => void\r\n     changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n }\r\n\r\nexport const Task= React.memo((props:TaskComponentType)=>{\r\n\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.todolistID, props.itemTask.id, title)\r\n    },[props.changeTaskTitle,props.todolistID,props.itemTask.id])\r\n\r\n    const changeStatusCheckbox = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistID, props.itemTask.id, e.currentTarget.checked)\r\n    }\r\n\r\n    const removeTaskHandler =()=>{\r\n        props.removeTask(props.todolistID, props.itemTask.id)\r\n    }\r\n\r\n    return (\r\n        <li key={props.itemTask.id} className={props.itemTask.isDone ? 'isDone' : \"\"}>\r\n            <Checkbox color='primary' onChange={changeStatusCheckbox} checked={props.itemTask.isDone}/>\r\n            <EditableSpan title={props.itemTask.title} changeTitle={changeTaskTitle}/>\r\n            <IconButton aria-label=\"delete\" size=\"small\"\r\n                        onClick={removeTaskHandler}>\r\n                <Delete fontSize=\"small\"/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, { useCallback} from \"react\";\nimport {TaskFilterType} from \"./App\";\nimport AddItemForm from \"./Components/AddItemForm\";\nimport EditableSpan from \"./Components/EditableSpan\";\nimport {Button} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {Task} from \"./TaskComponent\";\n\ntype TodolistPropsType = {\n    title: string;\n    task: Array<TaskType>;\n    removeTask: (todolistId: string, taskId: string) => void;\n    changeTask: (todolistID: string, buttonName: TaskFilterType) => void;\n    addTask: (todolistID: string, title: string) => void;\n    changeStatus: (todolistID: string, taskId: string, isDone: boolean) => void\n    filter: TaskFilterType\n    todolistID: string\n    deleteTodolist: (todolistID: string) => void\n    changeTaskTitle: (todolistID: string, taskId: string, title: string) => void\n    changeTodolistTitle: (todolistID: string, title: string) => void\n}\n\nexport type TaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\nexport type TodolistType = {\n    id: string;\n    title: string;\n    filter: TaskFilterType;\n}\nconst TodoList = React.memo((props: TodolistPropsType) => {\n    console.log(\"TodoList\")\n\n    let taskForFilter = props.task\n\n    if (props.filter === \"active\") {\n        taskForFilter = props.task.filter(item => !item.isDone)\n    }\n    if (props.filter === \"completed\") {\n        taskForFilter = props.task.filter(item => item.isDone)\n    }\n\n    const tasksItems = props.task.length ?\n        taskForFilter.map(item => {\n          return  <Task\n                changeTaskTitle={props.changeTaskTitle}\n                itemTask={item}\n                removeTask={props.removeTask}\n                changeTaskStatus={props.changeStatus}\n                todolistID={props.todolistID}\n            />\n        })\n        : <div>\"No task there\"</div>\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(props.todolistID, title)\n    }, [props.todolistID, props.addTask])\n\n    const changeTaskHandler = useCallback((title: TaskFilterType) => {\n        return () => {\n            props.changeTask(props.todolistID, title)\n        }\n    }, [props.changeTask, props.todolistID])\n\n    const onClickHandlerForTodoList = () => {\n        props.deleteTodolist(props.todolistID)\n    }\n    const changeTodoListTitle = useCallback((newTitle: string) => {\n        props.changeTodolistTitle(props.todolistID, newTitle)\n    }, [props.changeTodolistTitle, props.todolistID])\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <Button onClick={onClickHandlerForTodoList} variant=\"outlined\" startIcon={<Delete/>}\n                        style={{maxWidth: '60px', maxHeight: '30px', minWidth: '06px', minHeight: '30px'}}>\n                    Del\n                </Button>\n            </h3>\n            <div>\n                <AddItemForm addItem={addTask}/>\n            </div>\n            <ul>\n                {tasksItems}\n            </ul>\n            <div style={{paddingTop: \"10px\"}}>\n                <Button\n                    onClick={changeTaskHandler('all')}\n                    variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>All</Button>\n                <Button\n                    onClick={changeTaskHandler('active')}\n                    variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>Active</Button>\n                <Button\n                    onClick={changeTaskHandler('completed')}\n                    variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\n                    size={\"small\"}\n                    color={\"primary\"}>Completed</Button>\n            </div>\n        </div>\n\n    );\n})\n\nexport default TodoList;\n\n","import {v1} from \"uuid\";\nimport {TaskFilterType} from \"../App\";\nimport {TodolistType} from \"../TodoList\";\n\ntype TsarType =\n    | removeTaskACType\n    | addTodolistACType\n    | changeTodolistTitleACType\n    | changeTodolistFilterACType;\n\ntype removeTaskACType = ReturnType<typeof removeTodolistAC>;\nexport type addTodolistACType = ReturnType<typeof addTodolistAC>;\ntype changeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>;\ntype changeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>;\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistType> = [\n    { id: todolistId1, title: \"What to learn\", filter: \"all\" },\n    { id: todolistId2, title: \"What to buy\", filter: \"all\" },\n];\n\nexport const todolistsReducer = (\n    state: Array<TodolistType> = initialState,\n    action: TsarType\n): Array<TodolistType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter((item) => item.id !== action.payload.id);\n        case \"ADD-TODOLIST\":\n            return [\n                ...state,\n                {\n                    id: action.payload.todolistId,\n                    title: action.payload.title,\n                    filter: \"all\",\n                },\n            ];\n\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map((item) =>\n                item.id === action.payload.id\n                    ? {...item, title: action.payload.title}\n                    : item\n            );\n\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map((item) =>\n                item.id === action.payload.id\n                    ? {...item, filter: action.payload.filter}\n                    : item\n            );\n\n        default:\n            return state;\n    }\n};\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        payload: {id: todolistId},\n    } as const;\n};\n\nexport const addTodolistAC = (newTodolistTitle: string) => {\n    return {\n        type: \"ADD-TODOLIST\",\n        payload: {\n            title: newTodolistTitle,\n            todolistId: v1()\n        },\n    } as const;\n};\n\nexport const changeTodolistTitleAC = (\n    todolistId2: string,\n    newTodolistTitle: string\n) => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        payload: {id: todolistId2, title: newTodolistTitle},\n    } as const;\n};\n\nexport const changeTodolistFilterAC = (\n    todolistId2: string,\n    newFilter: TaskFilterType\n) => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        payload: {\n            id: todolistId2,\n            filter: newFilter,\n        },\n    } as const;\n};\n\n","import {v1} from \"uuid\";\nimport {TasksStateType} from \"../App\";\nimport {addTodolistACType, todolistId1, todolistId2} from \"./todolists-redusers\";\n\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\ntype addTaskACType = ReturnType<typeof addTaskAC>\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\ntype changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\ntype removeTodolistACType = ReturnType<typeof removeTaskTodoListAC>\n\ntype ActionType = removeTaskACType\n    | addTaskACType\n    | changeTaskStatusACType\n    | changeTaskTitleACType\n    | addTodolistACType\n    | removeTodolistACType\n\nconst initialState: TasksStateType = {\n    [todolistId1]: [\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\n        { id: v1(), title: \"JS\", isDone: true },\n    ],\n    [todolistId2]: [\n        { id: v1(), title: \"Milk\", isDone: true },\n        { id: v1(), title: \"React Book\", isDone: true },\n    ],\n};\n\nexport const tasksReducer = (state: TasksStateType= initialState, action: ActionType): TasksStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\": {\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId]\n                    .filter(item => item.id !== action.payload.taskId)\n            }\n        }\n        case \"ADD-TASK\": {\n            const newTask = {\n                id: v1(),\n                title: action.payload.title,\n                isDone: false,\n            };\n            return {\n                ...state,\n                [action.payload.todolistId]: [newTask, ...state[action.payload.todolistId]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId]\n                    .map(item => item.id === action.payload.taskId\n                        ? {...item, isDone: action.payload.isDone}\n                        : item)\n            }\n        }\n        case \"CHANGE-TASK-TITLE\": {\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId]\n                    .map(item => item.id === action.payload.taskId\n                        ? {...item, title: action.payload.title}\n                        : item)\n            }\n        }\n        case \"ADD-TODOLIST\": {\n            return {\n                ...state,\n                // eslint-disable-next-line no-useless-computed-key\n                [action.payload.todolistId]: [],\n            };\n        }\n        case \"REMOVE-TODOLIST\": {\n            let stateCopy = {...state};\n            delete stateCopy[action.payload.todolistId];\n            return stateCopy;\n        }\n\n        default:\n            return state;\n    }\n}\n\n\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\n    return {\n        type: \"REMOVE-TASK\",\n        payload: {\n            todolistId,\n            taskId\n        }\n    } as const\n}\n\nexport const addTaskAC = (todolistId: string, title: string) => {\n    return {\n        type: \"ADD-TASK\",\n        payload: {\n            todolistId,\n            title\n        }\n    } as const\n}\n\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean) => {\n    return {\n        type: \"CHANGE-TASK-STATUS\",\n        payload: {\n            todolistId,\n            taskId,\n            isDone\n        }\n    } as const\n}\n\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string) => {\n    return {\n        type: \"CHANGE-TASK-TITLE\",\n        payload: {\n            todolistId,\n            taskId,\n            title\n        }\n    } as const\n}\n\nexport const removeTaskTodoListAC = (todolistId: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        payload: {\n            todolistId,\n        }\n    } as const\n}\n\n","import React, {useCallback} from 'react';\nimport './App.css';\nimport AddItemForm from './Components/AddItemForm';\nimport TodoList, {TaskType, TodolistType} from './TodoList';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Redusers/tasks-redusers\";\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC, removeTodolistAC,\n} from \"./Redusers/todolists-redusers\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./State/Store\";\n\nexport type TaskFilterType = \"all\" | \"active\" | \"completed\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n// class components\nfunction App() {\n\n    // BusnessLogic\n    // бывает еще интерфейс -терминал \n    // Графический интерфейс у нас в проекте (GUI)\n    // GUI-> CRUD(Create, Read, Update, Delete)\n    // С + -одна функция\n    // r +++\n    // U ++!-пропорционально сложности обьекта (сколько свойств столько и функций внесения изменений)\n    // D +\n\n    // let todolistID1 = v1();\n    // let todolistID2 = v1();\n    //\n    // let [todolists, dispatchTodolists] = useReducer( todolistsReducer, [\n    //     {id: todolistID1, title: 'What to learn', filter: 'all'},\n    //     {id: todolistID2, title: 'What to buy', filter: 'completed'},\n    // ])\n    //\n    // let [tasks, dispatchTasks] =useReducer( tasksReducer, {\n    //     [todolistID1]: [\n    //         {id: v1(), title: \"HTML&CSS\", isDone: true},\n    //         {id: v1(), title: \"JS\", isDone: true},\n    //         {id: v1(), title: \"ReactJS\", isDone: false},\n    //         {id: v1(), title: \"Rest API\", isDone: false},\n    //         {id: v1(), title: \"GraphQL\", isDone: false},\n    //     ],\n    //     [todolistID2]: [\n    //         {id: v1(), title: \"HTML&CSS2\", isDone: true},\n    //         {id: v1(), title: \"JS2\", isDone: true},\n    //         {id: v1(), title: \"ReactJS2\", isDone: false},\n    //         {id: v1(), title: \"Rest API2\", isDone: false},\n    //         {id: v1(), title: \"GraphQL2\", isDone: false},\n    //     ]\n    // });\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>((state)=>state.todolists)\n    const tasks = useSelector<AppRootStateType,TasksStateType >((state)=> state.tasks)\n    const dispatch = useDispatch()\n    const deleteTodoList = (todolistID: string) => {\n        // setTodolists(todolists.filter(item => item.id !== todolistID))\n        // console.log(\"before t\", tasks)\n        //\n        // delete tasks[todolistID]\n        // console.log(\"after t\", tasks)\n        dispatch(removeTodolistAC(todolistID ))\n\n    }\n\n    const removeTask = useCallback(( todolistId: string, taskId: string) => {\n        // task = task.filter(item => item.id !== taskId)\n        // setTask(task)\n        //  setTask работает асинхронно\n        // setTasks({...tasks, [todolistId]: tasks[todolistId].filter(item => item.id !== taskId)})\n        dispatch(removeTaskAC(todolistId,taskId))\n    },[])\n    // ///////////////////////////////////\n    const changeTask = useCallback((todolistID: string, buttonName: TaskFilterType) => {\n        // filterTask(buttonName)\n        // let todolist = todolists.find(item => item.id === todolistID)\n        // if (todolist) {\n        //     todolist.filter = buttonName\n        //     setTodolists([...todolists])\n        // }\n        dispatch(changeTodolistFilterAC(todolistID,buttonName ))\n    },[])\n\n    // UseState работает асинхронно\n    const addTask = useCallback((todolistID: string, title: string) => {\n        // const newTask = {\n        //     id: v1(), title, isDone: false\n        // }\n        // setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]})\n        dispatch(addTaskAC(todolistID,title ))\n\n    }, [])\n\n    const addTodoList = useCallback((title: string) => {\n        // const newTodolistId: string = v1()\n        // setTodolists([...todolists, {id: newTodolistId, title, filter: \"all\"}])\n        // setTasks({\n        //     ...tasks, [newTodolistId]: [\n        //         {id: v1(), title: \"ReactJS2\", isDone: false},\n        //         {id: v1(), title: \"Rest API2\", isDone: false},\n        //         {id: v1(), title: \"GraphQL2\", isDone: false},]\n        // })\n        let action =addTodolistAC(title)\n        dispatch(action)\n    }, [])\n\n    const changeStatus = useCallback((todolistID: string, taskId: string, isDone: boolean) => {\n        // setTask(task.map(item=>item.id !== taskId ? item : {...item, isDone}))\n        // setTasks({\n        //     ...tasks, [todolistID]: tasks[todolistID].map(item => item.id === taskId ?\n        //         {...item, isDone} : item)\n        // })\n        dispatch(changeTaskStatusAC(todolistID, taskId, isDone))\n    },[])\n\n    const changeTaskTitle = useCallback((todolistsID: string, taskId: string, title: string) => {\n        // setTasks({\n        //     ...tasks, [todolistsID]: tasks[todolistsID].map(item => item.id === taskId ?\n        //         {...item, title} : item)\n        // })\n        dispatch(changeTaskTitleAC(todolistsID, taskId, title))\n    }, [])\n\n    const changeTodoListTitle = useCallback((todolistID: string, title: string) => {\n        // setTodolists(todolists.map(item => item.id === todolistID ? {...item, title} : item))\n        dispatch(changeTodolistTitleAC(todolistID,title ))\n    },[])\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    >\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        TodoList\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style ={{padding:\"20px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container>\n                    <Grid container spacing={3}>\n                        {todolists.map(item => {\n                            let taskForFilter = tasks[item.id];\n                            //\n                            // if (item.filter === \"active\") {\n                            //     taskForFilter = taskForFilter.filter(item => !item.isDone)\n                            // }\n                            // if (item.filter === \"completed\") {\n                            //     taskForFilter = taskForFilter.filter(item => item.isDone)\n                            // }\n                            return (<Grid item>\n                                <Paper style={{padding: \"15px\"}}>\n                                    <TodoList title={item.title}\n                                              key={item.id}\n                                              task={taskForFilter}\n                                              removeTask={removeTask}\n                                              changeTask={changeTask}\n                                              addTask={addTask}\n                                              changeStatus={changeStatus}\n                                              filter={item.filter}\n                                              todolistID={item.id}\n                                              deleteTodolist={deleteTodoList}\n                                              changeTaskTitle={changeTaskTitle}\n                                              changeTodolistTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>)\n                        })}\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    );\n\n}\n\nexport default App;\n","import { combineReducers} from 'redux'\r\nimport {tasksReducer} from \"../Redusers/tasks-redusers\";\r\nimport {todolistsReducer} from \"../Redusers/todolists-redusers\";\r\nimport { legacy_createStore} from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport const store = legacy_createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedax from \"./AppWithRedax\";\r\nimport {store} from \"./State/Store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedax/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}